main.rs
__main__.py:def unify_chromosomes(tree, bam_fn, ref_fn):
__main__.py:def main():
kdp.py:def kdp_job_vcf(chunk, params, header=None, sample=0):
kdp.py:def kdp_job_bam(chunk, bam, reference, params, header=None, sample=0):
kdp.py:def phase_region(up_variants, hap1, hap2, params, chunk_id=None, sample=0):

cli.rs <--- Done
cli.py:def parse_args(args):
cli.py:class IOParams():
cli.py:class KDParams():

kmer.rs <--- Done
kmer.py:def encode_nuc(nuc):
kmer.py:def generate_kmers(sequence, kmer=3):
kmer.py:def seq_to_kmer(seq, kmer_len=6):

similarity.rs <--- Done
similarity.py:def cosinesim(a, b):
similarity.py:def weighted_cosinesim(a, b):

graph.rs
graph.py:class PhasePath():
graph.py:def dfs(g, target, cur_node=None, cur_len=0, path=None):
haps.py:class Haplotype(): VariantNode
graph.py:def get_best_path(paths, params, exclude=None):
graph.py:def find_hap_paths(graph, hap, params):

vcf.rs
haps.py:def vcf_haps(variants, kmer):
kmer.py:def var_to_kfeat(entry, kmer=3):
graph.py:def vars_to_graph(variants, kmer=3):
kdp.py:def pull_variants(graph, used, h1_min_path, h1, h2_min_path, h2, chunk_id, sample=0):
kdp.py:def get_bounds(cnk):

bam.rs
haps.py:def bam_haps(bam, refseq, chrom, reg_start, reg_end, params):
haps.py:def hap_deduplicate(m_haps):
haps.py:def consolidate_with_best(m_haps):
haps.py:def read_cluster(all_ks, kmer, coverage, cossim, pctsize):


chunker.rs
matcher for filtering variants on input (truvari.Matcher, region_filter)
region tree which is essentially another filter (build_region_tree, merge_region_tree_overlaps)
truvari.chunker - need a way to iterate the stuff

comparisons.rs
entry_boundaries, overlaps, sizesim, entry_size, 

notsure.rs
truvari.compress_index_vcf
truvari.entry_to_hash -- maybe...
